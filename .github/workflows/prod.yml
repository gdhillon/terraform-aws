name: "Prod"

on:
  push:
    branches: [master]
  pull_request:    
    branches: [master]
env:

  TF_CLOUD_ORGANIZATION: ${{ secrets.TF_CLOUD_ORGANIZATION }}     

  TF_VAR_AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  TF_VAR_AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_VAR_AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  TF_VAR_CLUSTER_MASTER_USERNAME: ${{ secrets.CLUSTER_MASTER_USERNAME }}
  TF_VAR_CLUSTER_MASTER_PASSWORD: ${{ secrets.CLUSTER_MASTER_PASSWORD }}
  
  terraform_version: "1.2.5"
  working_directory: terraform
  target_environment: prod

jobs:
  terraform_plan:
    name: "Run Terraform Workflow for Prod"
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Find github project name
        run:  echo "project_name=$(basename `git rev-parse --show-toplevel`)" >> $GITHUB_ENV

      - name: Set Terraform Workspace
        run: |
          echo "Setting ***   ${{ env.project_name }}-${{ env.target_environment }}   *** as the Terraform Workspace"
          echo "TF_WORKSPACE=${{ env.project_name }}-${{ env.target_environment }}" >> $GITHUB_ENV      

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "${{ env.terraform_version }}"
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        id: init
        run: terraform init -input=false              
        working-directory: "${{ env.working_directory }}"
   

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: "${{ env.working_directory }}"

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: |
          terraform plan -no-color -input=false -var-file ./environments/${{ env.target_environment }}.tfvars
        working-directory: "${{ env.working_directory }}"
        continue-on-error: true

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply to Prod
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: |
          terraform apply --auto-approve -var-file ./environments/${{ env.target_environment }}.tfvars
        working-directory: "${{ env.working_directory }}"                
